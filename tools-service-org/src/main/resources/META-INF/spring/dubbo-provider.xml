<?xml version="1.0" encoding="UTF-8"?>
<!--
 - Copyright 1999-2011 TIS Group.
 -  
 - Licensed under the Apache License, Version 2.0 (the "License");
 - you may not use this file except in compliance with the License.
 - You may obtain a copy of the License at
 -  
 -      http://www.apache.org/licenses/LICENSE-2.0
 -  
 - Unless required by applicable law or agreed to in writing, software
 - distributed under the License is distributed on an "AS IS" BASIS,
 - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 - See the License for the specific language governing permissions and
 - limitations under the License.
-->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://code.alibabatech.com/schema/dubbo 
		http://code.alibabatech.com/schema/dubbo/dubbo.xsd">

	<!-- ================================ -->
	<!-- dubbo provider configuration info-->
	<!-- ================================ -->
	
	<!-- name: 多份部署的名字一直，表示同属该服务提供者的集群 -->
	<dubbo:application name="${dubbo.application.name}" owner="${dubbo.application.owner}" organization="${dubbo.application.organization}" />
    
    <!-- file是dubbo缓存文件: 有了这项配置后，当应用重启过程中，Dubbo注册中心不可用时则应用会从这个缓存文件读取服务提供者列表的信息，进一步保证应用可靠性 -->
    <dubbo:registry address="${dubbo.registry.address}" file="dubbo/output/${dubbo.application.name}.cache" />
	
    <!--uncomment this if you want to test dubbo's monitor-->
    <dubbo:monitor protocol="registry" />
	
    <!-- here we demonstrate both annotation-based and xml-based configs -->
    <!-- 扫描注解包路径，多个包用逗号分隔，不填pacakge表示扫描当前ApplicationContext中所有的类 -->  
    <dubbo:annotation package="org.tis.tools.service.impl" />
	
	<!-- 关于 dubbo:protocol 的配置说明 -->
	<!-- 
	port：
		使用固定端口暴露服务，而不要使用随机端口，这样在注册中心推送有延迟的情况下，消费者通过缓存列表也能调用到原地址，保证调用成功 
	
	Dispatcher:
		all 所有消息都派发到线程池，包括请求，响应，连接事件，断开事件，心跳等。
		direct 所有消息都不派发到线程池，全部在IO线程上直接执行。
		message 只有请求响应消息派发到线程池，其它连接断开事件，心跳等消息，直接在IO线程上执行。
		execution 只请求消息派发到线程池，不含响应，响应和其它连接断开事件，心跳等消息，直接在IO线程上执行。
		connection 在IO线程上，将连接断开事件放入队列，有序逐个执行，其它消息派发到线程池。
	
	ThreadPool:
		fixed 固定大小线程池，启动时建立线程，不关闭，一直持有。(缺省)
		cached 缓存线程池，空闲一分钟自动删除，需要时重建。
		limited 可伸缩线程池，但池中的线程数只会增长不会收缩。(为避免收缩时突然来了大流量引起的性能问题)。
	-->
    <!--  -->
    <dubbo:protocol 
    	name="${dubbo.protocol.name}" 
    	port="${dubbo.protocol.port}" 
    	serialization="fastjson" 
    	dispatcher="all" 
    	threadpool="fixed" 
    	threads="20" 
    	/>
    
</beans>